import { j as g } from "./annotorious-react.es11.js";
import { useState as O, useRef as A, useEffect as D } from "react";
import w from "openseadragon";
import { useAnnotator as L, useSelection as P } from "./annotorious-react.es2.js";
/* empty css                      */
/* empty css                      */
import "@annotorious/core";
import "@annotorious/annotorious";
import { toClientRects as S } from "./annotorious-react.es14.js";
import { useFloating as b, FloatingArrow as j } from "./annotorious-react.es13.js";
import { useViewer as U } from "./annotorious-react.es8.js";
import { inline as F, offset as M, flip as V, shift as z, arrow as H } from "./annotorious-react.es15.js";
import { autoUpdate as T } from "./annotorious-react.es16.js";
import x from "./annotorious-react.es17.js";
const X = (n, r) => {
  const { minX: d, minY: a, maxX: o, maxY: m } = r.bounds, { top: s, left: l } = n.element.getBoundingClientRect(), t = n.viewport.imageToViewerElementCoordinates(new w.Point(d, a)), p = n.viewport.imageToViewerElementCoordinates(new w.Point(o, m));
  return new DOMRect(
    t.x + l,
    t.y + s,
    p.x - t.x,
    p.y - t.y
  );
}, te = (n) => {
  var u, f;
  const r = L(), [d, a] = O(!1), o = U(), m = A(null), { selected: s, event: l } = P(), t = (u = s[0]) == null ? void 0 : u.annotation, p = (f = s[0]) == null ? void 0 : f.editable, { refs: c, floatingStyles: y, context: v } = b({
    open: d,
    onOpenChange: a,
    placement: n.placement,
    middleware: [
      F(),
      M(10),
      V({ crossAxis: !0 }),
      z({
        crossAxis: !0,
        boundary: o == null ? void 0 : o.element,
        padding: { right: 5, left: 5, top: 10, bottom: 10 }
      }),
      H({
        element: m,
        padding: 5
      })
    ],
    whileElementsMounted: T
  });
  D(() => {
    if (s.length === 0)
      a(!1);
    else {
      const e = () => {
        if (!o.element) return;
        const i = X(o, t.target.selector.geometry);
        c.setReference({
          getBoundingClientRect: () => i,
          getClientRects: () => S(i)
        });
      };
      return window.addEventListener("scroll", e, !0), window.addEventListener("resize", e), o.addHandler("update-viewport", e), e(), a(!0), () => {
        window.removeEventListener("scroll", e, !0), window.removeEventListener("resize", e), o.removeHandler("update-viewport", e);
      };
    }
  }, [n.popup, s, o]);
  const R = (e) => {
    const i = e.id || x();
    r.state.store.addBody({
      ...e,
      id: i,
      annotation: t.id,
      created: e.created || /* @__PURE__ */ new Date(),
      creator: r.getUser()
    });
  }, B = (e) => {
    r.state.store.deleteBody({ id: e, annotation: t.id });
  }, E = (e, i) => {
    const C = i.id || x(), h = {
      updated: /* @__PURE__ */ new Date(),
      updatedBy: r.getUser(),
      ...i,
      id: C,
      annotation: t.id
    };
    r.state.store.updateBody(e, h);
  };
  return d && t ? /* @__PURE__ */ g.jsxs(
    "div",
    {
      className: "a9s-popup a9s-image-popup",
      ref: c.setFloating,
      style: y,
      children: [
        n.arrow && /* @__PURE__ */ g.jsx(
          j,
          {
            ref: m,
            context: v,
            ...n.arrowProps || {}
          }
        ),
        n.popup({
          annotation: t,
          editable: p,
          event: l,
          onCreateBody: R,
          onDeleteBody: B,
          onUpdateBody: E
        })
      ]
    }
  ) : null;
};
export {
  te as OpenSeadragonAnnotationPopup
};
//# sourceMappingURL=annotorious-react.es9.js.map
