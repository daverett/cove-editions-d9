{"version":3,"file":"annotorious-react.es3.js","sources":["../src/AnnotoriousPlugin.tsx"],"sourcesContent":["import { useEffect, MutableRefObject } from 'react';\nimport { Annotator } from '@annotorious/annotorious';\nimport { useAnnotator } from './Annotorious';\n\nexport type AnnotatorPlugin<T extends unknown = Annotator<any, unknown>> =\n  (anno: T, opts?: Object) => ({ unmount?: () => void }) | void;\n\nexport interface AnnotoriousPluginProps<T extends unknown = Annotator<any, unknown>> {\n\n  pluginRef?: MutableRefObject<PluginReturnType<T>>; \n  \n  plugin: AnnotatorPlugin<T>;\n\n  onLoad?(instance: PluginReturnType<T>): void;\n\n  opts?: Object;\n\n}\n\ntype PluginReturnType<T> = ReturnType<AnnotatorPlugin<T>>;\n\nexport const AnnotoriousPlugin = <T extends unknown = Annotator<any, unknown>>(\n  props: AnnotoriousPluginProps<T>\n) => {\n  const { onLoad, opts, plugin, pluginRef } = props;\n\n  const anno = useAnnotator<T>();\n\n  useEffect(() => {\n    if (!anno) return;\n\n    const p = plugin(anno, opts);\n\n    if (pluginRef)\n      pluginRef.current = p;\n\n    if (onLoad)\n      onLoad(p);\n\n    return () => {\n      if (p && 'unmount' in p) {\n        p.unmount();\n      }\n\n      if (pluginRef)\n        pluginRef.current = null;\n    }\n  }, [anno, opts, plugin, pluginRef]);\n\n  return null;\n\n}\n"],"names":["AnnotoriousPlugin","props","onLoad","opts","plugin","pluginRef","anno","useAnnotator","useEffect","p"],"mappings":";;AAqBa,MAAAA,IAAoB,CAC/BC,MACG;AACH,QAAM,EAAE,QAAAC,GAAQ,MAAAC,GAAM,QAAAC,GAAQ,WAAAC,EAAc,IAAAJ,GAEtCK,IAAOC,EAAgB;AAE7B,SAAAC,EAAU,MAAM;AACd,QAAI,CAACF,EAAM;AAEL,UAAAG,IAAIL,EAAOE,GAAMH,CAAI;AAEvB,WAAAE,MACFA,EAAU,UAAUI,IAElBP,KACFA,EAAOO,CAAC,GAEH,MAAM;AACP,MAAAA,KAAK,aAAaA,KACpBA,EAAE,QAAQ,GAGRJ,MACFA,EAAU,UAAU;AAAA,IACxB;AAAA,KACC,CAACC,GAAMH,GAAMC,GAAQC,CAAS,CAAC,GAE3B;AAET;"}