function addBehaviors(bhvs) {
  if (bhvs.namespaces) {
    for (let prefix of Object.keys(bhvs.namespaces)) {
      if (!this.namespaces.has(bhvs.namespaces[prefix]) && !Array.from(this.namespaces.values()).includes(prefix)) {
        this.namespaces.set(bhvs.namespaces[prefix], prefix);
      }
    }
  }
  for (let prefix of this.namespaces.values()) {
    if (bhvs[prefix]) {
      for (let b of Object.keys(bhvs[prefix])) {
        this.behaviors[`${prefix}:${b}`] = bhvs[prefix][b];
      }
    }
  }
  if (bhvs["functions"]) {
    for (let fn of Object.keys(bhvs["functions"])) {
      this.utilities[fn] = bhvs["functions"][fn].bind(this.utilities);
    }
  }
  if (bhvs["handlers"]) {
    console.log("Behavior handlers are no longer used.");
  }
  if (bhvs["fallbacks"]) {
    console.log("Fallback behaviors are no longer used.");
  }
}
function addBehavior(ns, element, b) {
  let p;
  if (ns === Object(ns)) {
    for (let prefix of Object.keys(ns)) {
      if (!this.namespaces.has(ns[prefix])) {
        this.namespaces.set(ns[prefix], prefix);
        p = prefix;
      }
    }
  } else {
    p = ns;
  }
  this.behaviors[`${p}:${element}`] = b;
}
function removeBehavior(ns, element) {
  let p;
  if (ns === Object(ns)) {
    for (let prefix of Object.keys(ns)) {
      if (!this.namespaces.has(ns[prefix])) {
        this.namespaces.set(ns[prefix], prefix);
        p = prefix;
      }
    }
  } else {
    p = ns;
  }
  delete this.behaviors[`${p}:${element}`];
}
export {
  addBehavior,
  addBehaviors,
  removeBehavior
};
//# sourceMappingURL=react-text-annotator.es22.js.map
